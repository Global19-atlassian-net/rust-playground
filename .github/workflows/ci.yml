name: "Validate everything"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  QUAY_IO_USERNAME: shepmaster

jobs:
  # build_compiler_containers:
  #   name: "Build ${{ matrix.channel }} compiler container"
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       channel: [stable, beta, nightly]

  #   steps:
  #     - name: "Checkout code"
  #       uses: actions/checkout@v2

  #     - name: "Build and push container"
  #       uses: docker/build-push-action@v1
  #       with:
  #         username: ${{ env.QUAY_IO_USERNAME }}
  #         password: ${{ secrets.QUAY_IO_PASSWORD }}
  #         registry: quay.io
  #         repository: shepmaster/rust-playground-ci-rust-${{ matrix.channel }}
  #         tags: ${{ github.run_id }},latest
  #         path: compiler/base/
  #         build_args: channel=${{ matrix.channel }}
  #         always_pull: true
  #         cache_froms: shepmaster/rust-playground-ci-rust-${{ matrix.channel }}:${{ github.run_id }},shepmaster/rust-playground-ci-rust-${{ matrix.channel }}:latest
  #         labels: quay.expires-after=1w

  #         # always_pull -- not working

  # build_tool_containers:
  #   name: "Build ${{ matrix.tool }} tool container"
  #   runs-on: ubuntu-latest
  #   needs: build_compiler_containers
  #   continue-on-error: true

  #   strategy:
  #     matrix:
  #       tool: [clippy, rustfmt, miri]

  #   steps:
  #     - name: "Checkout code"
  #       uses: actions/checkout@v2

  #     - name: "Build and push container"
  #       uses: docker/build-push-action@v1
  #       with:
  #         username: ${{ env.QUAY_IO_USERNAME }}
  #         password: ${{ secrets.QUAY_IO_PASSWORD }}
  #         registry: quay.io
  #         repository: shepmaster/rust-playground-ci-tool-${{ matrix.tool }}
  #         tags: ${{ github.run_id }},latest
  #         path: compiler/${{ matrix.tool }}/
  #         always_pull: true
  #         cache_froms: shepmaster/rust-playground-ci-tool-${{ matrix.tool }}:${{ github.run_id }},shepmaster/rust-playground-ci-tool-${{ matrix.tool }}:latest
  #         labels: quay.expires-after=1w

  build_backend:
    name: "Build backend"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Cache Cargo intermediate products"
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ui/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('ui/**/Cargo.lock') }}-2

      - name: "Build backend"
        run: >-
            mkdir -p ui/target;
            docker
            run
            --rm
            -v $PWD/ui:/ui
            -v ~/.cargo/git:/home/rust/.cargo/git
            -v ~/.cargo/registry:/home/rust/.cargo/registry
            --workdir /ui
            ekidd/rust-musl-builder:stable
            bash -c '
              sudo chown -R rust:rust /home/rust/.cargo /ui/target;
              cargo build --locked --target=x86_64-unknown-linux-musl --release
            '

      - name: "Restore permissions"
        run: >-
          sudo chown -R runner:docker ~/.cargo/ ui/target

      - name: "Save backend artifact"
        uses: actions/upload-artifact@v2
        with:
          name: backend
          path: ui/target/x86_64-unknown-linux-musl/release/ui

  build_frontend:
    name: "Build frontend"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Get yarn cache directory path"
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: "Cache yarn intermediate products"
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: "Configure node"
        uses: actions/setup-node@v1
        with:
          node-version: 12.13

      - name: "Install dependencies"
        run: >-
          yarn --cwd ui/frontend/

      - name: "Run tests"
        run: >-
          yarn --cwd ui/frontend/ test

      - name: "Lint"
        run: >-
          yarn --cwd ui/frontend/ test:lint

      - name: "Build frontend"
        run: >-
          yarn --cwd ui/frontend/ run build:production

      - name: "Save frontend artifact"
        uses: actions/upload-artifact@v2
        with:
          name: frontend
          path: ui/frontend/build

  run_integration_tests:
    name: "Running integration tests"
    runs-on: ubuntu-latest
    needs:
      - build_backend
      - build_frontend

    defaults:
      run:
        working-directory: tests

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Configure Ruby"
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: "Cache bundler intermediate products"
        uses: actions/cache@v2
        with:
          path: tests/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('tests/**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: "Install gems"
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: "Pull containers"
        run: >-
          echo quay.io/shepmaster/rust-playground-ci-{rust-{stable,beta,nightly},tool-{clippy,rustfmt,miri}} | xargs -n1 docker pull

      - name: "Download backend"
        uses: actions/download-artifact@v2
        with:
          name: backend
          path: tests/server/

      - name: "Download frontend"
        uses: actions/download-artifact@v2
        with:
          name: frontend
          path: tests/server/built/

      - name: "Inspect"
        run: >-
          ls -lR server

      - name: "Run tests"
        env:
          PLAYGROUND_UI_ROOT: server/built/
          PLAYGROUND_GITHUB_TOKEN: not-really-set-yet
          PLAYGROUND_CORS_ENABLED: t
        run: |
          chmod +x ./server/ui && ./server/ui &
          bundle exec rspec
